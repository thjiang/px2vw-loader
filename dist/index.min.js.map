{"version":3,"file":"index.min.js.map","sources":["src/index.ts"],"sourcesContent":["const loaderUtils = require(\"loader-utils\");\r\n\r\ninterface IOptions {\r\n    unitToConvert: string;\r\n    viewportWidth: number;\r\n    viewportUnit: string;\r\n    minPixelValue: number;\r\n    unitPrecision: number;\r\n}\r\n\r\nconst getOptions = loaderUtils.getOptions;\r\n\r\nconst defaultOptions: IOptions = {\r\n    unitToConvert: \"px\", // (String) 需要转换的单位，默认为\"px\"\r\n    viewportWidth: 750, // (Number) 设计稿的视口宽度\r\n    viewportUnit: \"vw\", // (String) 希望使用的视口单位\r\n    minPixelValue: 1, // (Number) 设置最小的转换数值，如果为 1 的话，只有大于 1 的值会被转换\r\n    unitPrecision: 2, // (Number) 单位转换后保留的精度\r\n};\r\n\r\nconst getUnitRegexp = (unit: string) => {\r\n    return new RegExp(\r\n        \"\\\"[^\\\"]+\\\"|'[^']+'|url\\\\([^\\\\)]+\\\\)|(\\\\d*\\\\.?\\\\d+)\" + unit,\r\n        \"g\"\r\n    );\r\n};\r\n\r\nconst toFixed = (number: number, precision: number) => {\r\n    var multiplier = Math.pow(10, precision + 1),\r\n        wholeNumber = Math.floor(number * multiplier);\r\n    return (Math.round(wholeNumber / 10) * 10) / multiplier;\r\n};\r\n\r\nconst createPxReplace = (opts: IOptions) => {\r\n    return function (m: any, $1: any) {\r\n        if (!$1) return m;\r\n        var pixels = parseFloat($1);\r\n        if (pixels <= opts.minPixelValue) return m;\r\n        var parsedVal = toFixed(\r\n            (pixels / opts.viewportWidth) * 100,\r\n            opts.unitPrecision\r\n        );\r\n        return parsedVal === 0 ? \"0\" : parsedVal + opts.viewportUnit;\r\n    };\r\n};\r\n\r\nconst px2vw = (source: string, opts: IOptions) => {\r\n    return source.replace(\r\n        getUnitRegexp(opts.unitToConvert),\r\n        createPxReplace(opts)\r\n    );\r\n};\r\n\r\nconst px2vwLoader = function (this: any, source: string) {\r\n    this.cacheable();\r\n\r\n    const options = getOptions(this) || {};\r\n    const callback = this.async();\r\n    const opts = Object.assign({}, defaultOptions, options);\r\n\r\n    callback(null, px2vw(source, opts));\r\n};\r\n\r\nexport default px2vwLoader;\r\n"],"names":["getOptions","require","defaultOptions","unitToConvert","viewportWidth","viewportUnit","minPixelValue","unitPrecision","createPxReplace","opts","m","$1","pixels","parseFloat","multiplier","parsedVal","Math","round","floor","pow","px2vw","source","replace","RegExp","this","cacheable","options","callback","async","Object","assign"],"mappings":"sOAAA,MAUMA,EAVcC,QAAQ,gBAUGD,WAEzBE,EAA2B,CAC7BC,cAAe,KACfC,cAAe,IACfC,aAAc,KACdC,cAAe,EACfC,cAAe,GAgBbC,EAAmBC,GACd,SAAUC,EAAQC,GACrB,IAAKA,EAAI,OAAOD,EAChB,IAAIE,EAASC,WAAWF,GACxB,GAAcF,EAAKH,eAAfM,EAA8B,OAAOF,EACzC,IAVAI,EAUIC,EAR+B,GAA/BC,KAAKC,MADKD,KAAKE,MAUdN,EAASH,EAAKL,cAAiB,KAXpCU,EAAaE,KAAKG,IAAI,GAYlBV,EAAKF,cAZ6B,KAET,IAAYO,EAYzC,OAAqB,IAAdC,EAAkB,IAAMA,EAAYN,EAAKJ,cAIlDe,EAAQ,CAACC,EAAgBZ,IACpBY,EAAOC,QA1BHC,OACP,qDA0Bcd,EAAKN,cAzBnB,KA0BAK,EAAgBC,WAIJ,SAAqBY,GACrCG,KAAKC,YAEL,MAAMC,EAAU1B,EAAWwB,OAAS,GAC9BG,EAAWH,KAAKI,QAChBnB,EAAOoB,OAAOC,OAAO,GAAI5B,EAAgBwB,GAE/CC,EAAS,KAAMP,EAAMC,EAAQZ"}